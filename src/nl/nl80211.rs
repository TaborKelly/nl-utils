/* automatically generated by rust-bindgen */

pub type __s8 = ::libc::c_char;
pub type __u8 = ::libc::c_uchar;
pub type __s16 = ::libc::c_short;
pub type __u16 = ::libc::c_ushort;
pub type __s32 = ::libc::c_int;
pub type __u32 = ::libc::c_uint;
pub type __s64 = ::libc::c_longlong;
pub type __u64 = ::libc::c_ulonglong;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub fds_bits: [::libc::c_ulong; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __kernel_fd_set = Struct_Unnamed1;
pub type __kernel_sighandler_t =
    ::std::option::Option<extern "C" fn(arg1: ::libc::c_int) -> ()>;
pub type __kernel_key_t = ::libc::c_int;
pub type __kernel_mqd_t = ::libc::c_int;
pub type __kernel_old_uid_t = ::libc::c_ushort;
pub type __kernel_old_gid_t = ::libc::c_ushort;
pub type __kernel_old_dev_t = ::libc::c_ulong;
pub type __kernel_long_t = ::libc::c_long;
pub type __kernel_ulong_t = ::libc::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::libc::c_uint;
pub type __kernel_pid_t = ::libc::c_int;
pub type __kernel_ipc_pid_t = ::libc::c_int;
pub type __kernel_uid_t = ::libc::c_uint;
pub type __kernel_gid_t = ::libc::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::libc::c_int;
pub type __kernel_uid32_t = ::libc::c_uint;
pub type __kernel_gid32_t = ::libc::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub val: [::libc::c_int; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __kernel_fsid_t = Struct_Unnamed2;
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::libc::c_longlong;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::libc::c_int;
pub type __kernel_clockid_t = ::libc::c_int;
pub type __kernel_caddr_t = *mut ::libc::c_char;
pub type __kernel_uid16_t = ::libc::c_ushort;
pub type __kernel_gid16_t = ::libc::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type Enum_nl80211_commands = ::libc::c_uint;
pub const NL80211_CMD_UNSPEC: ::libc::c_uint = 0;
pub const NL80211_CMD_GET_WIPHY: ::libc::c_uint = 1;
pub const NL80211_CMD_SET_WIPHY: ::libc::c_uint = 2;
pub const NL80211_CMD_NEW_WIPHY: ::libc::c_uint = 3;
pub const NL80211_CMD_DEL_WIPHY: ::libc::c_uint = 4;
pub const NL80211_CMD_GET_INTERFACE: ::libc::c_uint = 5;
pub const NL80211_CMD_SET_INTERFACE: ::libc::c_uint = 6;
pub const NL80211_CMD_NEW_INTERFACE: ::libc::c_uint = 7;
pub const NL80211_CMD_DEL_INTERFACE: ::libc::c_uint = 8;
pub const NL80211_CMD_GET_KEY: ::libc::c_uint = 9;
pub const NL80211_CMD_SET_KEY: ::libc::c_uint = 10;
pub const NL80211_CMD_NEW_KEY: ::libc::c_uint = 11;
pub const NL80211_CMD_DEL_KEY: ::libc::c_uint = 12;
pub const NL80211_CMD_GET_BEACON: ::libc::c_uint = 13;
pub const NL80211_CMD_SET_BEACON: ::libc::c_uint = 14;
pub const NL80211_CMD_START_AP: ::libc::c_uint = 15;
pub const NL80211_CMD_NEW_BEACON: ::libc::c_uint = 15;
pub const NL80211_CMD_STOP_AP: ::libc::c_uint = 16;
pub const NL80211_CMD_DEL_BEACON: ::libc::c_uint = 16;
pub const NL80211_CMD_GET_STATION: ::libc::c_uint = 17;
pub const NL80211_CMD_SET_STATION: ::libc::c_uint = 18;
pub const NL80211_CMD_NEW_STATION: ::libc::c_uint = 19;
pub const NL80211_CMD_DEL_STATION: ::libc::c_uint = 20;
pub const NL80211_CMD_GET_MPATH: ::libc::c_uint = 21;
pub const NL80211_CMD_SET_MPATH: ::libc::c_uint = 22;
pub const NL80211_CMD_NEW_MPATH: ::libc::c_uint = 23;
pub const NL80211_CMD_DEL_MPATH: ::libc::c_uint = 24;
pub const NL80211_CMD_SET_BSS: ::libc::c_uint = 25;
pub const NL80211_CMD_SET_REG: ::libc::c_uint = 26;
pub const NL80211_CMD_REQ_SET_REG: ::libc::c_uint = 27;
pub const NL80211_CMD_GET_MESH_CONFIG: ::libc::c_uint = 28;
pub const NL80211_CMD_SET_MESH_CONFIG: ::libc::c_uint = 29;
pub const NL80211_CMD_SET_MGMT_EXTRA_IE: ::libc::c_uint = 30;
pub const NL80211_CMD_GET_REG: ::libc::c_uint = 31;
pub const NL80211_CMD_GET_SCAN: ::libc::c_uint = 32;
pub const NL80211_CMD_TRIGGER_SCAN: ::libc::c_uint = 33;
pub const NL80211_CMD_NEW_SCAN_RESULTS: ::libc::c_uint = 34;
pub const NL80211_CMD_SCAN_ABORTED: ::libc::c_uint = 35;
pub const NL80211_CMD_REG_CHANGE: ::libc::c_uint = 36;
pub const NL80211_CMD_AUTHENTICATE: ::libc::c_uint = 37;
pub const NL80211_CMD_ASSOCIATE: ::libc::c_uint = 38;
pub const NL80211_CMD_DEAUTHENTICATE: ::libc::c_uint = 39;
pub const NL80211_CMD_DISASSOCIATE: ::libc::c_uint = 40;
pub const NL80211_CMD_MICHAEL_MIC_FAILURE: ::libc::c_uint = 41;
pub const NL80211_CMD_REG_BEACON_HINT: ::libc::c_uint = 42;
pub const NL80211_CMD_JOIN_IBSS: ::libc::c_uint = 43;
pub const NL80211_CMD_LEAVE_IBSS: ::libc::c_uint = 44;
pub const NL80211_CMD_TESTMODE: ::libc::c_uint = 45;
pub const NL80211_CMD_CONNECT: ::libc::c_uint = 46;
pub const NL80211_CMD_ROAM: ::libc::c_uint = 47;
pub const NL80211_CMD_DISCONNECT: ::libc::c_uint = 48;
pub const NL80211_CMD_SET_WIPHY_NETNS: ::libc::c_uint = 49;
pub const NL80211_CMD_GET_SURVEY: ::libc::c_uint = 50;
pub const NL80211_CMD_NEW_SURVEY_RESULTS: ::libc::c_uint = 51;
pub const NL80211_CMD_SET_PMKSA: ::libc::c_uint = 52;
pub const NL80211_CMD_DEL_PMKSA: ::libc::c_uint = 53;
pub const NL80211_CMD_FLUSH_PMKSA: ::libc::c_uint = 54;
pub const NL80211_CMD_REMAIN_ON_CHANNEL: ::libc::c_uint = 55;
pub const NL80211_CMD_CANCEL_REMAIN_ON_CHANNEL: ::libc::c_uint = 56;
pub const NL80211_CMD_SET_TX_BITRATE_MASK: ::libc::c_uint = 57;
pub const NL80211_CMD_REGISTER_FRAME: ::libc::c_uint = 58;
pub const NL80211_CMD_REGISTER_ACTION: ::libc::c_uint = 58;
pub const NL80211_CMD_FRAME: ::libc::c_uint = 59;
pub const NL80211_CMD_ACTION: ::libc::c_uint = 59;
pub const NL80211_CMD_FRAME_TX_STATUS: ::libc::c_uint = 60;
pub const NL80211_CMD_ACTION_TX_STATUS: ::libc::c_uint = 60;
pub const NL80211_CMD_SET_POWER_SAVE: ::libc::c_uint = 61;
pub const NL80211_CMD_GET_POWER_SAVE: ::libc::c_uint = 62;
pub const NL80211_CMD_SET_CQM: ::libc::c_uint = 63;
pub const NL80211_CMD_NOTIFY_CQM: ::libc::c_uint = 64;
pub const NL80211_CMD_SET_CHANNEL: ::libc::c_uint = 65;
pub const NL80211_CMD_SET_WDS_PEER: ::libc::c_uint = 66;
pub const NL80211_CMD_FRAME_WAIT_CANCEL: ::libc::c_uint = 67;
pub const NL80211_CMD_JOIN_MESH: ::libc::c_uint = 68;
pub const NL80211_CMD_LEAVE_MESH: ::libc::c_uint = 69;
pub const NL80211_CMD_UNPROT_DEAUTHENTICATE: ::libc::c_uint = 70;
pub const NL80211_CMD_UNPROT_DISASSOCIATE: ::libc::c_uint = 71;
pub const NL80211_CMD_NEW_PEER_CANDIDATE: ::libc::c_uint = 72;
pub const NL80211_CMD_GET_WOWLAN: ::libc::c_uint = 73;
pub const NL80211_CMD_SET_WOWLAN: ::libc::c_uint = 74;
pub const NL80211_CMD_START_SCHED_SCAN: ::libc::c_uint = 75;
pub const NL80211_CMD_STOP_SCHED_SCAN: ::libc::c_uint = 76;
pub const NL80211_CMD_SCHED_SCAN_RESULTS: ::libc::c_uint = 77;
pub const NL80211_CMD_SCHED_SCAN_STOPPED: ::libc::c_uint = 78;
pub const NL80211_CMD_SET_REKEY_OFFLOAD: ::libc::c_uint = 79;
pub const NL80211_CMD_PMKSA_CANDIDATE: ::libc::c_uint = 80;
pub const NL80211_CMD_TDLS_OPER: ::libc::c_uint = 81;
pub const NL80211_CMD_TDLS_MGMT: ::libc::c_uint = 82;
pub const NL80211_CMD_UNEXPECTED_FRAME: ::libc::c_uint = 83;
pub const NL80211_CMD_PROBE_CLIENT: ::libc::c_uint = 84;
pub const NL80211_CMD_REGISTER_BEACONS: ::libc::c_uint = 85;
pub const NL80211_CMD_UNEXPECTED_4ADDR_FRAME: ::libc::c_uint = 86;
pub const NL80211_CMD_SET_NOACK_MAP: ::libc::c_uint = 87;
pub const NL80211_CMD_CH_SWITCH_NOTIFY: ::libc::c_uint = 88;
pub const NL80211_CMD_START_P2P_DEVICE: ::libc::c_uint = 89;
pub const NL80211_CMD_STOP_P2P_DEVICE: ::libc::c_uint = 90;
pub const NL80211_CMD_CONN_FAILED: ::libc::c_uint = 91;
pub const NL80211_CMD_SET_MCAST_RATE: ::libc::c_uint = 92;
pub const NL80211_CMD_SET_MAC_ACL: ::libc::c_uint = 93;
pub const NL80211_CMD_RADAR_DETECT: ::libc::c_uint = 94;
pub const NL80211_CMD_GET_PROTOCOL_FEATURES: ::libc::c_uint = 95;
pub const NL80211_CMD_UPDATE_FT_IES: ::libc::c_uint = 96;
pub const NL80211_CMD_FT_EVENT: ::libc::c_uint = 97;
pub const NL80211_CMD_CRIT_PROTOCOL_START: ::libc::c_uint = 98;
pub const NL80211_CMD_CRIT_PROTOCOL_STOP: ::libc::c_uint = 99;
pub const NL80211_CMD_GET_COALESCE: ::libc::c_uint = 100;
pub const NL80211_CMD_SET_COALESCE: ::libc::c_uint = 101;
pub const NL80211_CMD_CHANNEL_SWITCH: ::libc::c_uint = 102;
pub const NL80211_CMD_VENDOR: ::libc::c_uint = 103;
pub const NL80211_CMD_SET_QOS_MAP: ::libc::c_uint = 104;
pub const NL80211_CMD_ADD_TX_TS: ::libc::c_uint = 105;
pub const NL80211_CMD_DEL_TX_TS: ::libc::c_uint = 106;
pub const NL80211_CMD_GET_MPP: ::libc::c_uint = 107;
pub const NL80211_CMD_JOIN_OCB: ::libc::c_uint = 108;
pub const NL80211_CMD_LEAVE_OCB: ::libc::c_uint = 109;
pub const NL80211_CMD_CH_SWITCH_STARTED_NOTIFY: ::libc::c_uint = 110;
pub const NL80211_CMD_TDLS_CHANNEL_SWITCH: ::libc::c_uint = 111;
pub const NL80211_CMD_TDLS_CANCEL_CHANNEL_SWITCH: ::libc::c_uint = 112;
pub const __NL80211_CMD_AFTER_LAST: ::libc::c_uint = 113;
pub const NL80211_CMD_MAX: ::libc::c_uint = 112;
pub type Enum_nl80211_attrs = ::libc::c_uint;
pub const NL80211_ATTR_UNSPEC: ::libc::c_uint = 0;
pub const NL80211_ATTR_WIPHY: ::libc::c_uint = 1;
pub const NL80211_ATTR_WIPHY_NAME: ::libc::c_uint = 2;
pub const NL80211_ATTR_IFINDEX: ::libc::c_uint = 3;
pub const NL80211_ATTR_IFNAME: ::libc::c_uint = 4;
pub const NL80211_ATTR_IFTYPE: ::libc::c_uint = 5;
pub const NL80211_ATTR_MAC: ::libc::c_uint = 6;
pub const NL80211_ATTR_KEY_DATA: ::libc::c_uint = 7;
pub const NL80211_ATTR_KEY_IDX: ::libc::c_uint = 8;
pub const NL80211_ATTR_KEY_CIPHER: ::libc::c_uint = 9;
pub const NL80211_ATTR_KEY_SEQ: ::libc::c_uint = 10;
pub const NL80211_ATTR_KEY_DEFAULT: ::libc::c_uint = 11;
pub const NL80211_ATTR_BEACON_INTERVAL: ::libc::c_uint = 12;
pub const NL80211_ATTR_DTIM_PERIOD: ::libc::c_uint = 13;
pub const NL80211_ATTR_BEACON_HEAD: ::libc::c_uint = 14;
pub const NL80211_ATTR_BEACON_TAIL: ::libc::c_uint = 15;
pub const NL80211_ATTR_STA_AID: ::libc::c_uint = 16;
pub const NL80211_ATTR_STA_FLAGS: ::libc::c_uint = 17;
pub const NL80211_ATTR_STA_LISTEN_INTERVAL: ::libc::c_uint = 18;
pub const NL80211_ATTR_STA_SUPPORTED_RATES: ::libc::c_uint = 19;
pub const NL80211_ATTR_STA_VLAN: ::libc::c_uint = 20;
pub const NL80211_ATTR_STA_INFO: ::libc::c_uint = 21;
pub const NL80211_ATTR_WIPHY_BANDS: ::libc::c_uint = 22;
pub const NL80211_ATTR_MNTR_FLAGS: ::libc::c_uint = 23;
pub const NL80211_ATTR_MESH_ID: ::libc::c_uint = 24;
pub const NL80211_ATTR_STA_PLINK_ACTION: ::libc::c_uint = 25;
pub const NL80211_ATTR_MPATH_NEXT_HOP: ::libc::c_uint = 26;
pub const NL80211_ATTR_MPATH_INFO: ::libc::c_uint = 27;
pub const NL80211_ATTR_BSS_CTS_PROT: ::libc::c_uint = 28;
pub const NL80211_ATTR_BSS_SHORT_PREAMBLE: ::libc::c_uint = 29;
pub const NL80211_ATTR_BSS_SHORT_SLOT_TIME: ::libc::c_uint = 30;
pub const NL80211_ATTR_HT_CAPABILITY: ::libc::c_uint = 31;
pub const NL80211_ATTR_SUPPORTED_IFTYPES: ::libc::c_uint = 32;
pub const NL80211_ATTR_REG_ALPHA2: ::libc::c_uint = 33;
pub const NL80211_ATTR_REG_RULES: ::libc::c_uint = 34;
pub const NL80211_ATTR_MESH_CONFIG: ::libc::c_uint = 35;
pub const NL80211_ATTR_BSS_BASIC_RATES: ::libc::c_uint = 36;
pub const NL80211_ATTR_WIPHY_TXQ_PARAMS: ::libc::c_uint = 37;
pub const NL80211_ATTR_WIPHY_FREQ: ::libc::c_uint = 38;
pub const NL80211_ATTR_WIPHY_CHANNEL_TYPE: ::libc::c_uint = 39;
pub const NL80211_ATTR_KEY_DEFAULT_MGMT: ::libc::c_uint = 40;
pub const NL80211_ATTR_MGMT_SUBTYPE: ::libc::c_uint = 41;
pub const NL80211_ATTR_IE: ::libc::c_uint = 42;
pub const NL80211_ATTR_MAX_NUM_SCAN_SSIDS: ::libc::c_uint = 43;
pub const NL80211_ATTR_SCAN_FREQUENCIES: ::libc::c_uint = 44;
pub const NL80211_ATTR_SCAN_SSIDS: ::libc::c_uint = 45;
pub const NL80211_ATTR_GENERATION: ::libc::c_uint = 46;
pub const NL80211_ATTR_BSS: ::libc::c_uint = 47;
pub const NL80211_ATTR_REG_INITIATOR: ::libc::c_uint = 48;
pub const NL80211_ATTR_REG_TYPE: ::libc::c_uint = 49;
pub const NL80211_ATTR_SUPPORTED_COMMANDS: ::libc::c_uint = 50;
pub const NL80211_ATTR_FRAME: ::libc::c_uint = 51;
pub const NL80211_ATTR_SSID: ::libc::c_uint = 52;
pub const NL80211_ATTR_AUTH_TYPE: ::libc::c_uint = 53;
pub const NL80211_ATTR_REASON_CODE: ::libc::c_uint = 54;
pub const NL80211_ATTR_KEY_TYPE: ::libc::c_uint = 55;
pub const NL80211_ATTR_MAX_SCAN_IE_LEN: ::libc::c_uint = 56;
pub const NL80211_ATTR_CIPHER_SUITES: ::libc::c_uint = 57;
pub const NL80211_ATTR_FREQ_BEFORE: ::libc::c_uint = 58;
pub const NL80211_ATTR_FREQ_AFTER: ::libc::c_uint = 59;
pub const NL80211_ATTR_FREQ_FIXED: ::libc::c_uint = 60;
pub const NL80211_ATTR_WIPHY_RETRY_SHORT: ::libc::c_uint = 61;
pub const NL80211_ATTR_WIPHY_RETRY_LONG: ::libc::c_uint = 62;
pub const NL80211_ATTR_WIPHY_FRAG_THRESHOLD: ::libc::c_uint = 63;
pub const NL80211_ATTR_WIPHY_RTS_THRESHOLD: ::libc::c_uint = 64;
pub const NL80211_ATTR_TIMED_OUT: ::libc::c_uint = 65;
pub const NL80211_ATTR_USE_MFP: ::libc::c_uint = 66;
pub const NL80211_ATTR_STA_FLAGS2: ::libc::c_uint = 67;
pub const NL80211_ATTR_CONTROL_PORT: ::libc::c_uint = 68;
pub const NL80211_ATTR_TESTDATA: ::libc::c_uint = 69;
pub const NL80211_ATTR_PRIVACY: ::libc::c_uint = 70;
pub const NL80211_ATTR_DISCONNECTED_BY_AP: ::libc::c_uint = 71;
pub const NL80211_ATTR_STATUS_CODE: ::libc::c_uint = 72;
pub const NL80211_ATTR_CIPHER_SUITES_PAIRWISE: ::libc::c_uint = 73;
pub const NL80211_ATTR_CIPHER_SUITE_GROUP: ::libc::c_uint = 74;
pub const NL80211_ATTR_WPA_VERSIONS: ::libc::c_uint = 75;
pub const NL80211_ATTR_AKM_SUITES: ::libc::c_uint = 76;
pub const NL80211_ATTR_REQ_IE: ::libc::c_uint = 77;
pub const NL80211_ATTR_RESP_IE: ::libc::c_uint = 78;
pub const NL80211_ATTR_PREV_BSSID: ::libc::c_uint = 79;
pub const NL80211_ATTR_KEY: ::libc::c_uint = 80;
pub const NL80211_ATTR_KEYS: ::libc::c_uint = 81;
pub const NL80211_ATTR_PID: ::libc::c_uint = 82;
pub const NL80211_ATTR_4ADDR: ::libc::c_uint = 83;
pub const NL80211_ATTR_SURVEY_INFO: ::libc::c_uint = 84;
pub const NL80211_ATTR_PMKID: ::libc::c_uint = 85;
pub const NL80211_ATTR_MAX_NUM_PMKIDS: ::libc::c_uint = 86;
pub const NL80211_ATTR_DURATION: ::libc::c_uint = 87;
pub const NL80211_ATTR_COOKIE: ::libc::c_uint = 88;
pub const NL80211_ATTR_WIPHY_COVERAGE_CLASS: ::libc::c_uint = 89;
pub const NL80211_ATTR_TX_RATES: ::libc::c_uint = 90;
pub const NL80211_ATTR_FRAME_MATCH: ::libc::c_uint = 91;
pub const NL80211_ATTR_ACK: ::libc::c_uint = 92;
pub const NL80211_ATTR_PS_STATE: ::libc::c_uint = 93;
pub const NL80211_ATTR_CQM: ::libc::c_uint = 94;
pub const NL80211_ATTR_LOCAL_STATE_CHANGE: ::libc::c_uint = 95;
pub const NL80211_ATTR_AP_ISOLATE: ::libc::c_uint = 96;
pub const NL80211_ATTR_WIPHY_TX_POWER_SETTING: ::libc::c_uint = 97;
pub const NL80211_ATTR_WIPHY_TX_POWER_LEVEL: ::libc::c_uint = 98;
pub const NL80211_ATTR_TX_FRAME_TYPES: ::libc::c_uint = 99;
pub const NL80211_ATTR_RX_FRAME_TYPES: ::libc::c_uint = 100;
pub const NL80211_ATTR_FRAME_TYPE: ::libc::c_uint = 101;
pub const NL80211_ATTR_CONTROL_PORT_ETHERTYPE: ::libc::c_uint = 102;
pub const NL80211_ATTR_CONTROL_PORT_NO_ENCRYPT: ::libc::c_uint = 103;
pub const NL80211_ATTR_SUPPORT_IBSS_RSN: ::libc::c_uint = 104;
pub const NL80211_ATTR_WIPHY_ANTENNA_TX: ::libc::c_uint = 105;
pub const NL80211_ATTR_WIPHY_ANTENNA_RX: ::libc::c_uint = 106;
pub const NL80211_ATTR_MCAST_RATE: ::libc::c_uint = 107;
pub const NL80211_ATTR_OFFCHANNEL_TX_OK: ::libc::c_uint = 108;
pub const NL80211_ATTR_BSS_HT_OPMODE: ::libc::c_uint = 109;
pub const NL80211_ATTR_KEY_DEFAULT_TYPES: ::libc::c_uint = 110;
pub const NL80211_ATTR_MAX_REMAIN_ON_CHANNEL_DURATION: ::libc::c_uint = 111;
pub const NL80211_ATTR_MESH_SETUP: ::libc::c_uint = 112;
pub const NL80211_ATTR_WIPHY_ANTENNA_AVAIL_TX: ::libc::c_uint = 113;
pub const NL80211_ATTR_WIPHY_ANTENNA_AVAIL_RX: ::libc::c_uint = 114;
pub const NL80211_ATTR_SUPPORT_MESH_AUTH: ::libc::c_uint = 115;
pub const NL80211_ATTR_STA_PLINK_STATE: ::libc::c_uint = 116;
pub const NL80211_ATTR_WOWLAN_TRIGGERS: ::libc::c_uint = 117;
pub const NL80211_ATTR_WOWLAN_TRIGGERS_SUPPORTED: ::libc::c_uint = 118;
pub const NL80211_ATTR_SCHED_SCAN_INTERVAL: ::libc::c_uint = 119;
pub const NL80211_ATTR_INTERFACE_COMBINATIONS: ::libc::c_uint = 120;
pub const NL80211_ATTR_SOFTWARE_IFTYPES: ::libc::c_uint = 121;
pub const NL80211_ATTR_REKEY_DATA: ::libc::c_uint = 122;
pub const NL80211_ATTR_MAX_NUM_SCHED_SCAN_SSIDS: ::libc::c_uint = 123;
pub const NL80211_ATTR_MAX_SCHED_SCAN_IE_LEN: ::libc::c_uint = 124;
pub const NL80211_ATTR_SCAN_SUPP_RATES: ::libc::c_uint = 125;
pub const NL80211_ATTR_HIDDEN_SSID: ::libc::c_uint = 126;
pub const NL80211_ATTR_IE_PROBE_RESP: ::libc::c_uint = 127;
pub const NL80211_ATTR_IE_ASSOC_RESP: ::libc::c_uint = 128;
pub const NL80211_ATTR_STA_WME: ::libc::c_uint = 129;
pub const NL80211_ATTR_SUPPORT_AP_UAPSD: ::libc::c_uint = 130;
pub const NL80211_ATTR_ROAM_SUPPORT: ::libc::c_uint = 131;
pub const NL80211_ATTR_SCHED_SCAN_MATCH: ::libc::c_uint = 132;
pub const NL80211_ATTR_MAX_MATCH_SETS: ::libc::c_uint = 133;
pub const NL80211_ATTR_PMKSA_CANDIDATE: ::libc::c_uint = 134;
pub const NL80211_ATTR_TX_NO_CCK_RATE: ::libc::c_uint = 135;
pub const NL80211_ATTR_TDLS_ACTION: ::libc::c_uint = 136;
pub const NL80211_ATTR_TDLS_DIALOG_TOKEN: ::libc::c_uint = 137;
pub const NL80211_ATTR_TDLS_OPERATION: ::libc::c_uint = 138;
pub const NL80211_ATTR_TDLS_SUPPORT: ::libc::c_uint = 139;
pub const NL80211_ATTR_TDLS_EXTERNAL_SETUP: ::libc::c_uint = 140;
pub const NL80211_ATTR_DEVICE_AP_SME: ::libc::c_uint = 141;
pub const NL80211_ATTR_DONT_WAIT_FOR_ACK: ::libc::c_uint = 142;
pub const NL80211_ATTR_FEATURE_FLAGS: ::libc::c_uint = 143;
pub const NL80211_ATTR_PROBE_RESP_OFFLOAD: ::libc::c_uint = 144;
pub const NL80211_ATTR_PROBE_RESP: ::libc::c_uint = 145;
pub const NL80211_ATTR_DFS_REGION: ::libc::c_uint = 146;
pub const NL80211_ATTR_DISABLE_HT: ::libc::c_uint = 147;
pub const NL80211_ATTR_HT_CAPABILITY_MASK: ::libc::c_uint = 148;
pub const NL80211_ATTR_NOACK_MAP: ::libc::c_uint = 149;
pub const NL80211_ATTR_INACTIVITY_TIMEOUT: ::libc::c_uint = 150;
pub const NL80211_ATTR_RX_SIGNAL_DBM: ::libc::c_uint = 151;
pub const NL80211_ATTR_BG_SCAN_PERIOD: ::libc::c_uint = 152;
pub const NL80211_ATTR_WDEV: ::libc::c_uint = 153;
pub const NL80211_ATTR_USER_REG_HINT_TYPE: ::libc::c_uint = 154;
pub const NL80211_ATTR_CONN_FAILED_REASON: ::libc::c_uint = 155;
pub const NL80211_ATTR_SAE_DATA: ::libc::c_uint = 156;
pub const NL80211_ATTR_VHT_CAPABILITY: ::libc::c_uint = 157;
pub const NL80211_ATTR_SCAN_FLAGS: ::libc::c_uint = 158;
pub const NL80211_ATTR_CHANNEL_WIDTH: ::libc::c_uint = 159;
pub const NL80211_ATTR_CENTER_FREQ1: ::libc::c_uint = 160;
pub const NL80211_ATTR_CENTER_FREQ2: ::libc::c_uint = 161;
pub const NL80211_ATTR_P2P_CTWINDOW: ::libc::c_uint = 162;
pub const NL80211_ATTR_P2P_OPPPS: ::libc::c_uint = 163;
pub const NL80211_ATTR_LOCAL_MESH_POWER_MODE: ::libc::c_uint = 164;
pub const NL80211_ATTR_ACL_POLICY: ::libc::c_uint = 165;
pub const NL80211_ATTR_MAC_ADDRS: ::libc::c_uint = 166;
pub const NL80211_ATTR_MAC_ACL_MAX: ::libc::c_uint = 167;
pub const NL80211_ATTR_RADAR_EVENT: ::libc::c_uint = 168;
pub const NL80211_ATTR_EXT_CAPA: ::libc::c_uint = 169;
pub const NL80211_ATTR_EXT_CAPA_MASK: ::libc::c_uint = 170;
pub const NL80211_ATTR_STA_CAPABILITY: ::libc::c_uint = 171;
pub const NL80211_ATTR_STA_EXT_CAPABILITY: ::libc::c_uint = 172;
pub const NL80211_ATTR_PROTOCOL_FEATURES: ::libc::c_uint = 173;
pub const NL80211_ATTR_SPLIT_WIPHY_DUMP: ::libc::c_uint = 174;
pub const NL80211_ATTR_DISABLE_VHT: ::libc::c_uint = 175;
pub const NL80211_ATTR_VHT_CAPABILITY_MASK: ::libc::c_uint = 176;
pub const NL80211_ATTR_MDID: ::libc::c_uint = 177;
pub const NL80211_ATTR_IE_RIC: ::libc::c_uint = 178;
pub const NL80211_ATTR_CRIT_PROT_ID: ::libc::c_uint = 179;
pub const NL80211_ATTR_MAX_CRIT_PROT_DURATION: ::libc::c_uint = 180;
pub const NL80211_ATTR_PEER_AID: ::libc::c_uint = 181;
pub const NL80211_ATTR_COALESCE_RULE: ::libc::c_uint = 182;
pub const NL80211_ATTR_CH_SWITCH_COUNT: ::libc::c_uint = 183;
pub const NL80211_ATTR_CH_SWITCH_BLOCK_TX: ::libc::c_uint = 184;
pub const NL80211_ATTR_CSA_IES: ::libc::c_uint = 185;
pub const NL80211_ATTR_CSA_C_OFF_BEACON: ::libc::c_uint = 186;
pub const NL80211_ATTR_CSA_C_OFF_PRESP: ::libc::c_uint = 187;
pub const NL80211_ATTR_RXMGMT_FLAGS: ::libc::c_uint = 188;
pub const NL80211_ATTR_STA_SUPPORTED_CHANNELS: ::libc::c_uint = 189;
pub const NL80211_ATTR_STA_SUPPORTED_OPER_CLASSES: ::libc::c_uint = 190;
pub const NL80211_ATTR_HANDLE_DFS: ::libc::c_uint = 191;
pub const NL80211_ATTR_SUPPORT_5_MHZ: ::libc::c_uint = 192;
pub const NL80211_ATTR_SUPPORT_10_MHZ: ::libc::c_uint = 193;
pub const NL80211_ATTR_OPMODE_NOTIF: ::libc::c_uint = 194;
pub const NL80211_ATTR_VENDOR_ID: ::libc::c_uint = 195;
pub const NL80211_ATTR_VENDOR_SUBCMD: ::libc::c_uint = 196;
pub const NL80211_ATTR_VENDOR_DATA: ::libc::c_uint = 197;
pub const NL80211_ATTR_VENDOR_EVENTS: ::libc::c_uint = 198;
pub const NL80211_ATTR_QOS_MAP: ::libc::c_uint = 199;
pub const NL80211_ATTR_MAC_HINT: ::libc::c_uint = 200;
pub const NL80211_ATTR_WIPHY_FREQ_HINT: ::libc::c_uint = 201;
pub const NL80211_ATTR_MAX_AP_ASSOC_STA: ::libc::c_uint = 202;
pub const NL80211_ATTR_TDLS_PEER_CAPABILITY: ::libc::c_uint = 203;
pub const NL80211_ATTR_SOCKET_OWNER: ::libc::c_uint = 204;
pub const NL80211_ATTR_CSA_C_OFFSETS_TX: ::libc::c_uint = 205;
pub const NL80211_ATTR_MAX_CSA_COUNTERS: ::libc::c_uint = 206;
pub const NL80211_ATTR_TDLS_INITIATOR: ::libc::c_uint = 207;
pub const NL80211_ATTR_USE_RRM: ::libc::c_uint = 208;
pub const NL80211_ATTR_WIPHY_DYN_ACK: ::libc::c_uint = 209;
pub const NL80211_ATTR_TSID: ::libc::c_uint = 210;
pub const NL80211_ATTR_USER_PRIO: ::libc::c_uint = 211;
pub const NL80211_ATTR_ADMITTED_TIME: ::libc::c_uint = 212;
pub const NL80211_ATTR_SMPS_MODE: ::libc::c_uint = 213;
pub const NL80211_ATTR_OPER_CLASS: ::libc::c_uint = 214;
pub const NL80211_ATTR_MAC_MASK: ::libc::c_uint = 215;
pub const __NL80211_ATTR_AFTER_LAST: ::libc::c_uint = 216;
pub const NUM_NL80211_ATTR: ::libc::c_uint = 216;
pub const NL80211_ATTR_MAX: ::libc::c_uint = 215;
pub type Enum_nl80211_iftype = ::libc::c_uint;
pub const NL80211_IFTYPE_UNSPECIFIED: ::libc::c_uint = 0;
pub const NL80211_IFTYPE_ADHOC: ::libc::c_uint = 1;
pub const NL80211_IFTYPE_STATION: ::libc::c_uint = 2;
pub const NL80211_IFTYPE_AP: ::libc::c_uint = 3;
pub const NL80211_IFTYPE_AP_VLAN: ::libc::c_uint = 4;
pub const NL80211_IFTYPE_WDS: ::libc::c_uint = 5;
pub const NL80211_IFTYPE_MONITOR: ::libc::c_uint = 6;
pub const NL80211_IFTYPE_MESH_POINT: ::libc::c_uint = 7;
pub const NL80211_IFTYPE_P2P_CLIENT: ::libc::c_uint = 8;
pub const NL80211_IFTYPE_P2P_GO: ::libc::c_uint = 9;
pub const NL80211_IFTYPE_P2P_DEVICE: ::libc::c_uint = 10;
pub const NL80211_IFTYPE_OCB: ::libc::c_uint = 11;
pub const NUM_NL80211_IFTYPES: ::libc::c_uint = 12;
pub const NL80211_IFTYPE_MAX: ::libc::c_uint = 11;
pub type Enum_nl80211_sta_flags = ::libc::c_uint;
pub const __NL80211_STA_FLAG_INVALID: ::libc::c_uint = 0;
pub const NL80211_STA_FLAG_AUTHORIZED: ::libc::c_uint = 1;
pub const NL80211_STA_FLAG_SHORT_PREAMBLE: ::libc::c_uint = 2;
pub const NL80211_STA_FLAG_WME: ::libc::c_uint = 3;
pub const NL80211_STA_FLAG_MFP: ::libc::c_uint = 4;
pub const NL80211_STA_FLAG_AUTHENTICATED: ::libc::c_uint = 5;
pub const NL80211_STA_FLAG_TDLS_PEER: ::libc::c_uint = 6;
pub const NL80211_STA_FLAG_ASSOCIATED: ::libc::c_uint = 7;
pub const __NL80211_STA_FLAG_AFTER_LAST: ::libc::c_uint = 8;
pub const NL80211_STA_FLAG_MAX: ::libc::c_uint = 7;
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_nl80211_sta_flag_update {
    pub mask: __u32,
    pub set: __u32,
}
impl ::std::clone::Clone for Struct_nl80211_sta_flag_update {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nl80211_sta_flag_update {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_nl80211_rate_info = ::libc::c_uint;
pub const __NL80211_RATE_INFO_INVALID: ::libc::c_uint = 0;
pub const NL80211_RATE_INFO_BITRATE: ::libc::c_uint = 1;
pub const NL80211_RATE_INFO_MCS: ::libc::c_uint = 2;
pub const NL80211_RATE_INFO_40_MHZ_WIDTH: ::libc::c_uint = 3;
pub const NL80211_RATE_INFO_SHORT_GI: ::libc::c_uint = 4;
pub const NL80211_RATE_INFO_BITRATE32: ::libc::c_uint = 5;
pub const NL80211_RATE_INFO_VHT_MCS: ::libc::c_uint = 6;
pub const NL80211_RATE_INFO_VHT_NSS: ::libc::c_uint = 7;
pub const NL80211_RATE_INFO_80_MHZ_WIDTH: ::libc::c_uint = 8;
pub const NL80211_RATE_INFO_80P80_MHZ_WIDTH: ::libc::c_uint = 9;
pub const NL80211_RATE_INFO_160_MHZ_WIDTH: ::libc::c_uint = 10;
pub const __NL80211_RATE_INFO_AFTER_LAST: ::libc::c_uint = 11;
pub const NL80211_RATE_INFO_MAX: ::libc::c_uint = 10;
pub type Enum_nl80211_sta_bss_param = ::libc::c_uint;
pub const __NL80211_STA_BSS_PARAM_INVALID: ::libc::c_uint = 0;
pub const NL80211_STA_BSS_PARAM_CTS_PROT: ::libc::c_uint = 1;
pub const NL80211_STA_BSS_PARAM_SHORT_PREAMBLE: ::libc::c_uint = 2;
pub const NL80211_STA_BSS_PARAM_SHORT_SLOT_TIME: ::libc::c_uint = 3;
pub const NL80211_STA_BSS_PARAM_DTIM_PERIOD: ::libc::c_uint = 4;
pub const NL80211_STA_BSS_PARAM_BEACON_INTERVAL: ::libc::c_uint = 5;
pub const __NL80211_STA_BSS_PARAM_AFTER_LAST: ::libc::c_uint = 6;
pub const NL80211_STA_BSS_PARAM_MAX: ::libc::c_uint = 5;
pub type Enum_nl80211_sta_info = ::libc::c_uint;
pub const __NL80211_STA_INFO_INVALID: ::libc::c_uint = 0;
pub const NL80211_STA_INFO_INACTIVE_TIME: ::libc::c_uint = 1;
pub const NL80211_STA_INFO_RX_BYTES: ::libc::c_uint = 2;
pub const NL80211_STA_INFO_TX_BYTES: ::libc::c_uint = 3;
pub const NL80211_STA_INFO_LLID: ::libc::c_uint = 4;
pub const NL80211_STA_INFO_PLID: ::libc::c_uint = 5;
pub const NL80211_STA_INFO_PLINK_STATE: ::libc::c_uint = 6;
pub const NL80211_STA_INFO_SIGNAL: ::libc::c_uint = 7;
pub const NL80211_STA_INFO_TX_BITRATE: ::libc::c_uint = 8;
pub const NL80211_STA_INFO_RX_PACKETS: ::libc::c_uint = 9;
pub const NL80211_STA_INFO_TX_PACKETS: ::libc::c_uint = 10;
pub const NL80211_STA_INFO_TX_RETRIES: ::libc::c_uint = 11;
pub const NL80211_STA_INFO_TX_FAILED: ::libc::c_uint = 12;
pub const NL80211_STA_INFO_SIGNAL_AVG: ::libc::c_uint = 13;
pub const NL80211_STA_INFO_RX_BITRATE: ::libc::c_uint = 14;
pub const NL80211_STA_INFO_BSS_PARAM: ::libc::c_uint = 15;
pub const NL80211_STA_INFO_CONNECTED_TIME: ::libc::c_uint = 16;
pub const NL80211_STA_INFO_STA_FLAGS: ::libc::c_uint = 17;
pub const NL80211_STA_INFO_BEACON_LOSS: ::libc::c_uint = 18;
pub const NL80211_STA_INFO_T_OFFSET: ::libc::c_uint = 19;
pub const NL80211_STA_INFO_LOCAL_PM: ::libc::c_uint = 20;
pub const NL80211_STA_INFO_PEER_PM: ::libc::c_uint = 21;
pub const NL80211_STA_INFO_NONPEER_PM: ::libc::c_uint = 22;
pub const NL80211_STA_INFO_RX_BYTES64: ::libc::c_uint = 23;
pub const NL80211_STA_INFO_TX_BYTES64: ::libc::c_uint = 24;
pub const NL80211_STA_INFO_CHAIN_SIGNAL: ::libc::c_uint = 25;
pub const NL80211_STA_INFO_CHAIN_SIGNAL_AVG: ::libc::c_uint = 26;
pub const NL80211_STA_INFO_EXPECTED_THROUGHPUT: ::libc::c_uint = 27;
pub const __NL80211_STA_INFO_AFTER_LAST: ::libc::c_uint = 28;
pub const NL80211_STA_INFO_MAX: ::libc::c_uint = 27;
pub type Enum_nl80211_mpath_flags = ::libc::c_uint;
pub const NL80211_MPATH_FLAG_ACTIVE: ::libc::c_uint = 1;
pub const NL80211_MPATH_FLAG_RESOLVING: ::libc::c_uint = 2;
pub const NL80211_MPATH_FLAG_SN_VALID: ::libc::c_uint = 4;
pub const NL80211_MPATH_FLAG_FIXED: ::libc::c_uint = 8;
pub const NL80211_MPATH_FLAG_RESOLVED: ::libc::c_uint = 16;
pub type Enum_nl80211_mpath_info = ::libc::c_uint;
pub const __NL80211_MPATH_INFO_INVALID: ::libc::c_uint = 0;
pub const NL80211_MPATH_INFO_FRAME_QLEN: ::libc::c_uint = 1;
pub const NL80211_MPATH_INFO_SN: ::libc::c_uint = 2;
pub const NL80211_MPATH_INFO_METRIC: ::libc::c_uint = 3;
pub const NL80211_MPATH_INFO_EXPTIME: ::libc::c_uint = 4;
pub const NL80211_MPATH_INFO_FLAGS: ::libc::c_uint = 5;
pub const NL80211_MPATH_INFO_DISCOVERY_TIMEOUT: ::libc::c_uint = 6;
pub const NL80211_MPATH_INFO_DISCOVERY_RETRIES: ::libc::c_uint = 7;
pub const __NL80211_MPATH_INFO_AFTER_LAST: ::libc::c_uint = 8;
pub const NL80211_MPATH_INFO_MAX: ::libc::c_uint = 7;
pub type Enum_nl80211_band_attr = ::libc::c_uint;
pub const __NL80211_BAND_ATTR_INVALID: ::libc::c_uint = 0;
pub const NL80211_BAND_ATTR_FREQS: ::libc::c_uint = 1;
pub const NL80211_BAND_ATTR_RATES: ::libc::c_uint = 2;
pub const NL80211_BAND_ATTR_HT_MCS_SET: ::libc::c_uint = 3;
pub const NL80211_BAND_ATTR_HT_CAPA: ::libc::c_uint = 4;
pub const NL80211_BAND_ATTR_HT_AMPDU_FACTOR: ::libc::c_uint = 5;
pub const NL80211_BAND_ATTR_HT_AMPDU_DENSITY: ::libc::c_uint = 6;
pub const NL80211_BAND_ATTR_VHT_MCS_SET: ::libc::c_uint = 7;
pub const NL80211_BAND_ATTR_VHT_CAPA: ::libc::c_uint = 8;
pub const __NL80211_BAND_ATTR_AFTER_LAST: ::libc::c_uint = 9;
pub const NL80211_BAND_ATTR_MAX: ::libc::c_uint = 8;
pub type Enum_nl80211_frequency_attr = ::libc::c_uint;
pub const __NL80211_FREQUENCY_ATTR_INVALID: ::libc::c_uint = 0;
pub const NL80211_FREQUENCY_ATTR_FREQ: ::libc::c_uint = 1;
pub const NL80211_FREQUENCY_ATTR_DISABLED: ::libc::c_uint = 2;
pub const NL80211_FREQUENCY_ATTR_NO_IR: ::libc::c_uint = 3;
pub const __NL80211_FREQUENCY_ATTR_NO_IBSS: ::libc::c_uint = 4;
pub const NL80211_FREQUENCY_ATTR_RADAR: ::libc::c_uint = 5;
pub const NL80211_FREQUENCY_ATTR_MAX_TX_POWER: ::libc::c_uint = 6;
pub const NL80211_FREQUENCY_ATTR_DFS_STATE: ::libc::c_uint = 7;
pub const NL80211_FREQUENCY_ATTR_DFS_TIME: ::libc::c_uint = 8;
pub const NL80211_FREQUENCY_ATTR_NO_HT40_MINUS: ::libc::c_uint = 9;
pub const NL80211_FREQUENCY_ATTR_NO_HT40_PLUS: ::libc::c_uint = 10;
pub const NL80211_FREQUENCY_ATTR_NO_80MHZ: ::libc::c_uint = 11;
pub const NL80211_FREQUENCY_ATTR_NO_160MHZ: ::libc::c_uint = 12;
pub const NL80211_FREQUENCY_ATTR_DFS_CAC_TIME: ::libc::c_uint = 13;
pub const NL80211_FREQUENCY_ATTR_INDOOR_ONLY: ::libc::c_uint = 14;
pub const NL80211_FREQUENCY_ATTR_GO_CONCURRENT: ::libc::c_uint = 15;
pub const NL80211_FREQUENCY_ATTR_NO_20MHZ: ::libc::c_uint = 16;
pub const NL80211_FREQUENCY_ATTR_NO_10MHZ: ::libc::c_uint = 17;
pub const __NL80211_FREQUENCY_ATTR_AFTER_LAST: ::libc::c_uint = 18;
pub const NL80211_FREQUENCY_ATTR_MAX: ::libc::c_uint = 17;
pub type Enum_nl80211_bitrate_attr = ::libc::c_uint;
pub const __NL80211_BITRATE_ATTR_INVALID: ::libc::c_uint = 0;
pub const NL80211_BITRATE_ATTR_RATE: ::libc::c_uint = 1;
pub const NL80211_BITRATE_ATTR_2GHZ_SHORTPREAMBLE: ::libc::c_uint = 2;
pub const __NL80211_BITRATE_ATTR_AFTER_LAST: ::libc::c_uint = 3;
pub const NL80211_BITRATE_ATTR_MAX: ::libc::c_uint = 2;
pub type Enum_nl80211_reg_initiator = ::libc::c_uint;
pub const NL80211_REGDOM_SET_BY_CORE: ::libc::c_uint = 0;
pub const NL80211_REGDOM_SET_BY_USER: ::libc::c_uint = 1;
pub const NL80211_REGDOM_SET_BY_DRIVER: ::libc::c_uint = 2;
pub const NL80211_REGDOM_SET_BY_COUNTRY_IE: ::libc::c_uint = 3;
pub type Enum_nl80211_reg_type = ::libc::c_uint;
pub const NL80211_REGDOM_TYPE_COUNTRY: ::libc::c_uint = 0;
pub const NL80211_REGDOM_TYPE_WORLD: ::libc::c_uint = 1;
pub const NL80211_REGDOM_TYPE_CUSTOM_WORLD: ::libc::c_uint = 2;
pub const NL80211_REGDOM_TYPE_INTERSECTION: ::libc::c_uint = 3;
pub type Enum_nl80211_reg_rule_attr = ::libc::c_uint;
pub const __NL80211_REG_RULE_ATTR_INVALID: ::libc::c_uint = 0;
pub const NL80211_ATTR_REG_RULE_FLAGS: ::libc::c_uint = 1;
pub const NL80211_ATTR_FREQ_RANGE_START: ::libc::c_uint = 2;
pub const NL80211_ATTR_FREQ_RANGE_END: ::libc::c_uint = 3;
pub const NL80211_ATTR_FREQ_RANGE_MAX_BW: ::libc::c_uint = 4;
pub const NL80211_ATTR_POWER_RULE_MAX_ANT_GAIN: ::libc::c_uint = 5;
pub const NL80211_ATTR_POWER_RULE_MAX_EIRP: ::libc::c_uint = 6;
pub const NL80211_ATTR_DFS_CAC_TIME: ::libc::c_uint = 7;
pub const __NL80211_REG_RULE_ATTR_AFTER_LAST: ::libc::c_uint = 8;
pub const NL80211_REG_RULE_ATTR_MAX: ::libc::c_uint = 7;
pub type Enum_nl80211_sched_scan_match_attr = ::libc::c_uint;
pub const __NL80211_SCHED_SCAN_MATCH_ATTR_INVALID: ::libc::c_uint = 0;
pub const NL80211_SCHED_SCAN_MATCH_ATTR_SSID: ::libc::c_uint = 1;
pub const NL80211_SCHED_SCAN_MATCH_ATTR_RSSI: ::libc::c_uint = 2;
pub const __NL80211_SCHED_SCAN_MATCH_ATTR_AFTER_LAST: ::libc::c_uint = 3;
pub const NL80211_SCHED_SCAN_MATCH_ATTR_MAX: ::libc::c_uint = 2;
pub type Enum_nl80211_reg_rule_flags = ::libc::c_uint;
pub const NL80211_RRF_NO_OFDM: ::libc::c_uint = 1;
pub const NL80211_RRF_NO_CCK: ::libc::c_uint = 2;
pub const NL80211_RRF_NO_INDOOR: ::libc::c_uint = 4;
pub const NL80211_RRF_NO_OUTDOOR: ::libc::c_uint = 8;
pub const NL80211_RRF_DFS: ::libc::c_uint = 16;
pub const NL80211_RRF_PTP_ONLY: ::libc::c_uint = 32;
pub const NL80211_RRF_PTMP_ONLY: ::libc::c_uint = 64;
pub const NL80211_RRF_NO_IR: ::libc::c_uint = 128;
pub const __NL80211_RRF_NO_IBSS: ::libc::c_uint = 256;
pub const NL80211_RRF_AUTO_BW: ::libc::c_uint = 2048;
pub const NL80211_RRF_GO_CONCURRENT: ::libc::c_uint = 4096;
pub const NL80211_RRF_NO_HT40MINUS: ::libc::c_uint = 8192;
pub const NL80211_RRF_NO_HT40PLUS: ::libc::c_uint = 16384;
pub const NL80211_RRF_NO_80MHZ: ::libc::c_uint = 32768;
pub const NL80211_RRF_NO_160MHZ: ::libc::c_uint = 65536;
pub type Enum_nl80211_dfs_regions = ::libc::c_uint;
pub const NL80211_DFS_UNSET: ::libc::c_uint = 0;
pub const NL80211_DFS_FCC: ::libc::c_uint = 1;
pub const NL80211_DFS_ETSI: ::libc::c_uint = 2;
pub const NL80211_DFS_JP: ::libc::c_uint = 3;
pub type Enum_nl80211_user_reg_hint_type = ::libc::c_uint;
pub const NL80211_USER_REG_HINT_USER: ::libc::c_uint = 0;
pub const NL80211_USER_REG_HINT_CELL_BASE: ::libc::c_uint = 1;
pub const NL80211_USER_REG_HINT_INDOOR: ::libc::c_uint = 2;
pub type Enum_nl80211_survey_info = ::libc::c_uint;
pub const __NL80211_SURVEY_INFO_INVALID: ::libc::c_uint = 0;
pub const NL80211_SURVEY_INFO_FREQUENCY: ::libc::c_uint = 1;
pub const NL80211_SURVEY_INFO_NOISE: ::libc::c_uint = 2;
pub const NL80211_SURVEY_INFO_IN_USE: ::libc::c_uint = 3;
pub const NL80211_SURVEY_INFO_CHANNEL_TIME: ::libc::c_uint = 4;
pub const NL80211_SURVEY_INFO_CHANNEL_TIME_BUSY: ::libc::c_uint = 5;
pub const NL80211_SURVEY_INFO_CHANNEL_TIME_EXT_BUSY: ::libc::c_uint = 6;
pub const NL80211_SURVEY_INFO_CHANNEL_TIME_RX: ::libc::c_uint = 7;
pub const NL80211_SURVEY_INFO_CHANNEL_TIME_TX: ::libc::c_uint = 8;
pub const __NL80211_SURVEY_INFO_AFTER_LAST: ::libc::c_uint = 9;
pub const NL80211_SURVEY_INFO_MAX: ::libc::c_uint = 8;
pub type Enum_nl80211_mntr_flags = ::libc::c_uint;
pub const __NL80211_MNTR_FLAG_INVALID: ::libc::c_uint = 0;
pub const NL80211_MNTR_FLAG_FCSFAIL: ::libc::c_uint = 1;
pub const NL80211_MNTR_FLAG_PLCPFAIL: ::libc::c_uint = 2;
pub const NL80211_MNTR_FLAG_CONTROL: ::libc::c_uint = 3;
pub const NL80211_MNTR_FLAG_OTHER_BSS: ::libc::c_uint = 4;
pub const NL80211_MNTR_FLAG_COOK_FRAMES: ::libc::c_uint = 5;
pub const NL80211_MNTR_FLAG_ACTIVE: ::libc::c_uint = 6;
pub const __NL80211_MNTR_FLAG_AFTER_LAST: ::libc::c_uint = 7;
pub const NL80211_MNTR_FLAG_MAX: ::libc::c_uint = 6;
pub type Enum_nl80211_mesh_power_mode = ::libc::c_uint;
pub const NL80211_MESH_POWER_UNKNOWN: ::libc::c_uint = 0;
pub const NL80211_MESH_POWER_ACTIVE: ::libc::c_uint = 1;
pub const NL80211_MESH_POWER_LIGHT_SLEEP: ::libc::c_uint = 2;
pub const NL80211_MESH_POWER_DEEP_SLEEP: ::libc::c_uint = 3;
pub const __NL80211_MESH_POWER_AFTER_LAST: ::libc::c_uint = 4;
pub const NL80211_MESH_POWER_MAX: ::libc::c_uint = 3;
pub type Enum_nl80211_meshconf_params = ::libc::c_uint;
pub const __NL80211_MESHCONF_INVALID: ::libc::c_uint = 0;
pub const NL80211_MESHCONF_RETRY_TIMEOUT: ::libc::c_uint = 1;
pub const NL80211_MESHCONF_CONFIRM_TIMEOUT: ::libc::c_uint = 2;
pub const NL80211_MESHCONF_HOLDING_TIMEOUT: ::libc::c_uint = 3;
pub const NL80211_MESHCONF_MAX_PEER_LINKS: ::libc::c_uint = 4;
pub const NL80211_MESHCONF_MAX_RETRIES: ::libc::c_uint = 5;
pub const NL80211_MESHCONF_TTL: ::libc::c_uint = 6;
pub const NL80211_MESHCONF_AUTO_OPEN_PLINKS: ::libc::c_uint = 7;
pub const NL80211_MESHCONF_HWMP_MAX_PREQ_RETRIES: ::libc::c_uint = 8;
pub const NL80211_MESHCONF_PATH_REFRESH_TIME: ::libc::c_uint = 9;
pub const NL80211_MESHCONF_MIN_DISCOVERY_TIMEOUT: ::libc::c_uint = 10;
pub const NL80211_MESHCONF_HWMP_ACTIVE_PATH_TIMEOUT: ::libc::c_uint = 11;
pub const NL80211_MESHCONF_HWMP_PREQ_MIN_INTERVAL: ::libc::c_uint = 12;
pub const NL80211_MESHCONF_HWMP_NET_DIAM_TRVS_TIME: ::libc::c_uint = 13;
pub const NL80211_MESHCONF_HWMP_ROOTMODE: ::libc::c_uint = 14;
pub const NL80211_MESHCONF_ELEMENT_TTL: ::libc::c_uint = 15;
pub const NL80211_MESHCONF_HWMP_RANN_INTERVAL: ::libc::c_uint = 16;
pub const NL80211_MESHCONF_GATE_ANNOUNCEMENTS: ::libc::c_uint = 17;
pub const NL80211_MESHCONF_HWMP_PERR_MIN_INTERVAL: ::libc::c_uint = 18;
pub const NL80211_MESHCONF_FORWARDING: ::libc::c_uint = 19;
pub const NL80211_MESHCONF_RSSI_THRESHOLD: ::libc::c_uint = 20;
pub const NL80211_MESHCONF_SYNC_OFFSET_MAX_NEIGHBOR: ::libc::c_uint = 21;
pub const NL80211_MESHCONF_HT_OPMODE: ::libc::c_uint = 22;
pub const NL80211_MESHCONF_HWMP_PATH_TO_ROOT_TIMEOUT: ::libc::c_uint = 23;
pub const NL80211_MESHCONF_HWMP_ROOT_INTERVAL: ::libc::c_uint = 24;
pub const NL80211_MESHCONF_HWMP_CONFIRMATION_INTERVAL: ::libc::c_uint = 25;
pub const NL80211_MESHCONF_POWER_MODE: ::libc::c_uint = 26;
pub const NL80211_MESHCONF_AWAKE_WINDOW: ::libc::c_uint = 27;
pub const NL80211_MESHCONF_PLINK_TIMEOUT: ::libc::c_uint = 28;
pub const __NL80211_MESHCONF_ATTR_AFTER_LAST: ::libc::c_uint = 29;
pub const NL80211_MESHCONF_ATTR_MAX: ::libc::c_uint = 28;
pub type Enum_nl80211_mesh_setup_params = ::libc::c_uint;
pub const __NL80211_MESH_SETUP_INVALID: ::libc::c_uint = 0;
pub const NL80211_MESH_SETUP_ENABLE_VENDOR_PATH_SEL: ::libc::c_uint = 1;
pub const NL80211_MESH_SETUP_ENABLE_VENDOR_METRIC: ::libc::c_uint = 2;
pub const NL80211_MESH_SETUP_IE: ::libc::c_uint = 3;
pub const NL80211_MESH_SETUP_USERSPACE_AUTH: ::libc::c_uint = 4;
pub const NL80211_MESH_SETUP_USERSPACE_AMPE: ::libc::c_uint = 5;
pub const NL80211_MESH_SETUP_ENABLE_VENDOR_SYNC: ::libc::c_uint = 6;
pub const NL80211_MESH_SETUP_USERSPACE_MPM: ::libc::c_uint = 7;
pub const NL80211_MESH_SETUP_AUTH_PROTOCOL: ::libc::c_uint = 8;
pub const __NL80211_MESH_SETUP_ATTR_AFTER_LAST: ::libc::c_uint = 9;
pub const NL80211_MESH_SETUP_ATTR_MAX: ::libc::c_uint = 8;
pub type Enum_nl80211_txq_attr = ::libc::c_uint;
pub const __NL80211_TXQ_ATTR_INVALID: ::libc::c_uint = 0;
pub const NL80211_TXQ_ATTR_AC: ::libc::c_uint = 1;
pub const NL80211_TXQ_ATTR_TXOP: ::libc::c_uint = 2;
pub const NL80211_TXQ_ATTR_CWMIN: ::libc::c_uint = 3;
pub const NL80211_TXQ_ATTR_CWMAX: ::libc::c_uint = 4;
pub const NL80211_TXQ_ATTR_AIFS: ::libc::c_uint = 5;
pub const __NL80211_TXQ_ATTR_AFTER_LAST: ::libc::c_uint = 6;
pub const NL80211_TXQ_ATTR_MAX: ::libc::c_uint = 5;
pub type Enum_nl80211_ac = ::libc::c_uint;
pub const NL80211_AC_VO: ::libc::c_uint = 0;
pub const NL80211_AC_VI: ::libc::c_uint = 1;
pub const NL80211_AC_BE: ::libc::c_uint = 2;
pub const NL80211_AC_BK: ::libc::c_uint = 3;
pub const NL80211_NUM_ACS: ::libc::c_uint = 4;
pub type Enum_nl80211_channel_type = ::libc::c_uint;
pub const NL80211_CHAN_NO_HT: ::libc::c_uint = 0;
pub const NL80211_CHAN_HT20: ::libc::c_uint = 1;
pub const NL80211_CHAN_HT40MINUS: ::libc::c_uint = 2;
pub const NL80211_CHAN_HT40PLUS: ::libc::c_uint = 3;
pub type Enum_nl80211_chan_width = ::libc::c_uint;
pub const NL80211_CHAN_WIDTH_20_NOHT: ::libc::c_uint = 0;
pub const NL80211_CHAN_WIDTH_20: ::libc::c_uint = 1;
pub const NL80211_CHAN_WIDTH_40: ::libc::c_uint = 2;
pub const NL80211_CHAN_WIDTH_80: ::libc::c_uint = 3;
pub const NL80211_CHAN_WIDTH_80P80: ::libc::c_uint = 4;
pub const NL80211_CHAN_WIDTH_160: ::libc::c_uint = 5;
pub const NL80211_CHAN_WIDTH_5: ::libc::c_uint = 6;
pub const NL80211_CHAN_WIDTH_10: ::libc::c_uint = 7;
pub type Enum_nl80211_bss_scan_width = ::libc::c_uint;
pub const NL80211_BSS_CHAN_WIDTH_20: ::libc::c_uint = 0;
pub const NL80211_BSS_CHAN_WIDTH_10: ::libc::c_uint = 1;
pub const NL80211_BSS_CHAN_WIDTH_5: ::libc::c_uint = 2;
pub type Enum_nl80211_bss = ::libc::c_uint;
pub const __NL80211_BSS_INVALID: ::libc::c_uint = 0;
pub const NL80211_BSS_BSSID: ::libc::c_uint = 1;
pub const NL80211_BSS_FREQUENCY: ::libc::c_uint = 2;
pub const NL80211_BSS_TSF: ::libc::c_uint = 3;
pub const NL80211_BSS_BEACON_INTERVAL: ::libc::c_uint = 4;
pub const NL80211_BSS_CAPABILITY: ::libc::c_uint = 5;
pub const NL80211_BSS_INFORMATION_ELEMENTS: ::libc::c_uint = 6;
pub const NL80211_BSS_SIGNAL_MBM: ::libc::c_uint = 7;
pub const NL80211_BSS_SIGNAL_UNSPEC: ::libc::c_uint = 8;
pub const NL80211_BSS_STATUS: ::libc::c_uint = 9;
pub const NL80211_BSS_SEEN_MS_AGO: ::libc::c_uint = 10;
pub const NL80211_BSS_BEACON_IES: ::libc::c_uint = 11;
pub const NL80211_BSS_CHAN_WIDTH: ::libc::c_uint = 12;
pub const NL80211_BSS_BEACON_TSF: ::libc::c_uint = 13;
pub const NL80211_BSS_PRESP_DATA: ::libc::c_uint = 14;
pub const __NL80211_BSS_AFTER_LAST: ::libc::c_uint = 15;
pub const NL80211_BSS_MAX: ::libc::c_uint = 14;
pub type Enum_nl80211_bss_status = ::libc::c_uint;
pub const NL80211_BSS_STATUS_AUTHENTICATED: ::libc::c_uint = 0;
pub const NL80211_BSS_STATUS_ASSOCIATED: ::libc::c_uint = 1;
pub const NL80211_BSS_STATUS_IBSS_JOINED: ::libc::c_uint = 2;
pub type Enum_nl80211_auth_type = ::libc::c_uint;
pub const NL80211_AUTHTYPE_OPEN_SYSTEM: ::libc::c_uint = 0;
pub const NL80211_AUTHTYPE_SHARED_KEY: ::libc::c_uint = 1;
pub const NL80211_AUTHTYPE_FT: ::libc::c_uint = 2;
pub const NL80211_AUTHTYPE_NETWORK_EAP: ::libc::c_uint = 3;
pub const NL80211_AUTHTYPE_SAE: ::libc::c_uint = 4;
pub const __NL80211_AUTHTYPE_NUM: ::libc::c_uint = 5;
pub const NL80211_AUTHTYPE_MAX: ::libc::c_uint = 4;
pub const NL80211_AUTHTYPE_AUTOMATIC: ::libc::c_uint = 5;
pub type Enum_nl80211_key_type = ::libc::c_uint;
pub const NL80211_KEYTYPE_GROUP: ::libc::c_uint = 0;
pub const NL80211_KEYTYPE_PAIRWISE: ::libc::c_uint = 1;
pub const NL80211_KEYTYPE_PEERKEY: ::libc::c_uint = 2;
pub const NUM_NL80211_KEYTYPES: ::libc::c_uint = 3;
pub type Enum_nl80211_mfp = ::libc::c_uint;
pub const NL80211_MFP_NO: ::libc::c_uint = 0;
pub const NL80211_MFP_REQUIRED: ::libc::c_uint = 1;
pub type Enum_nl80211_wpa_versions = ::libc::c_uint;
pub const NL80211_WPA_VERSION_1: ::libc::c_uint = 1;
pub const NL80211_WPA_VERSION_2: ::libc::c_uint = 2;
pub type Enum_nl80211_key_default_types = ::libc::c_uint;
pub const __NL80211_KEY_DEFAULT_TYPE_INVALID: ::libc::c_uint = 0;
pub const NL80211_KEY_DEFAULT_TYPE_UNICAST: ::libc::c_uint = 1;
pub const NL80211_KEY_DEFAULT_TYPE_MULTICAST: ::libc::c_uint = 2;
pub const NUM_NL80211_KEY_DEFAULT_TYPES: ::libc::c_uint = 3;
pub type Enum_nl80211_key_attributes = ::libc::c_uint;
pub const __NL80211_KEY_INVALID: ::libc::c_uint = 0;
pub const NL80211_KEY_DATA: ::libc::c_uint = 1;
pub const NL80211_KEY_IDX: ::libc::c_uint = 2;
pub const NL80211_KEY_CIPHER: ::libc::c_uint = 3;
pub const NL80211_KEY_SEQ: ::libc::c_uint = 4;
pub const NL80211_KEY_DEFAULT: ::libc::c_uint = 5;
pub const NL80211_KEY_DEFAULT_MGMT: ::libc::c_uint = 6;
pub const NL80211_KEY_TYPE: ::libc::c_uint = 7;
pub const NL80211_KEY_DEFAULT_TYPES: ::libc::c_uint = 8;
pub const __NL80211_KEY_AFTER_LAST: ::libc::c_uint = 9;
pub const NL80211_KEY_MAX: ::libc::c_uint = 8;
pub type Enum_nl80211_tx_rate_attributes = ::libc::c_uint;
pub const __NL80211_TXRATE_INVALID: ::libc::c_uint = 0;
pub const NL80211_TXRATE_LEGACY: ::libc::c_uint = 1;
pub const NL80211_TXRATE_HT: ::libc::c_uint = 2;
pub const NL80211_TXRATE_VHT: ::libc::c_uint = 3;
pub const NL80211_TXRATE_GI: ::libc::c_uint = 4;
pub const __NL80211_TXRATE_AFTER_LAST: ::libc::c_uint = 5;
pub const NL80211_TXRATE_MAX: ::libc::c_uint = 4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nl80211_txrate_vht {
    pub mcs: [__u16; 8usize],
}
impl ::std::clone::Clone for Struct_nl80211_txrate_vht {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nl80211_txrate_vht {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_nl80211_txrate_gi = ::libc::c_uint;
pub const NL80211_TXRATE_DEFAULT_GI: ::libc::c_uint = 0;
pub const NL80211_TXRATE_FORCE_SGI: ::libc::c_uint = 1;
pub const NL80211_TXRATE_FORCE_LGI: ::libc::c_uint = 2;
pub type Enum_nl80211_band = ::libc::c_uint;
pub const NL80211_BAND_2GHZ: ::libc::c_uint = 0;
pub const NL80211_BAND_5GHZ: ::libc::c_uint = 1;
pub const NL80211_BAND_60GHZ: ::libc::c_uint = 2;
pub type Enum_nl80211_ps_state = ::libc::c_uint;
pub const NL80211_PS_DISABLED: ::libc::c_uint = 0;
pub const NL80211_PS_ENABLED: ::libc::c_uint = 1;
pub type Enum_nl80211_attr_cqm = ::libc::c_uint;
pub const __NL80211_ATTR_CQM_INVALID: ::libc::c_uint = 0;
pub const NL80211_ATTR_CQM_RSSI_THOLD: ::libc::c_uint = 1;
pub const NL80211_ATTR_CQM_RSSI_HYST: ::libc::c_uint = 2;
pub const NL80211_ATTR_CQM_RSSI_THRESHOLD_EVENT: ::libc::c_uint = 3;
pub const NL80211_ATTR_CQM_PKT_LOSS_EVENT: ::libc::c_uint = 4;
pub const NL80211_ATTR_CQM_TXE_RATE: ::libc::c_uint = 5;
pub const NL80211_ATTR_CQM_TXE_PKTS: ::libc::c_uint = 6;
pub const NL80211_ATTR_CQM_TXE_INTVL: ::libc::c_uint = 7;
pub const NL80211_ATTR_CQM_BEACON_LOSS_EVENT: ::libc::c_uint = 8;
pub const __NL80211_ATTR_CQM_AFTER_LAST: ::libc::c_uint = 9;
pub const NL80211_ATTR_CQM_MAX: ::libc::c_uint = 8;
pub type Enum_nl80211_cqm_rssi_threshold_event = ::libc::c_uint;
pub const NL80211_CQM_RSSI_THRESHOLD_EVENT_LOW: ::libc::c_uint = 0;
pub const NL80211_CQM_RSSI_THRESHOLD_EVENT_HIGH: ::libc::c_uint = 1;
pub const NL80211_CQM_RSSI_BEACON_LOSS_EVENT: ::libc::c_uint = 2;
pub type Enum_nl80211_tx_power_setting = ::libc::c_uint;
pub const NL80211_TX_POWER_AUTOMATIC: ::libc::c_uint = 0;
pub const NL80211_TX_POWER_LIMITED: ::libc::c_uint = 1;
pub const NL80211_TX_POWER_FIXED: ::libc::c_uint = 2;
pub type Enum_nl80211_packet_pattern_attr = ::libc::c_uint;
pub const __NL80211_PKTPAT_INVALID: ::libc::c_uint = 0;
pub const NL80211_PKTPAT_MASK: ::libc::c_uint = 1;
pub const NL80211_PKTPAT_PATTERN: ::libc::c_uint = 2;
pub const NL80211_PKTPAT_OFFSET: ::libc::c_uint = 3;
pub const NUM_NL80211_PKTPAT: ::libc::c_uint = 4;
pub const MAX_NL80211_PKTPAT: ::libc::c_uint = 3;
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_nl80211_pattern_support {
    pub max_patterns: __u32,
    pub min_pattern_len: __u32,
    pub max_pattern_len: __u32,
    pub max_pkt_offset: __u32,
}
impl ::std::clone::Clone for Struct_nl80211_pattern_support {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nl80211_pattern_support {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_nl80211_wowlan_triggers = ::libc::c_uint;
pub const __NL80211_WOWLAN_TRIG_INVALID: ::libc::c_uint = 0;
pub const NL80211_WOWLAN_TRIG_ANY: ::libc::c_uint = 1;
pub const NL80211_WOWLAN_TRIG_DISCONNECT: ::libc::c_uint = 2;
pub const NL80211_WOWLAN_TRIG_MAGIC_PKT: ::libc::c_uint = 3;
pub const NL80211_WOWLAN_TRIG_PKT_PATTERN: ::libc::c_uint = 4;
pub const NL80211_WOWLAN_TRIG_GTK_REKEY_SUPPORTED: ::libc::c_uint = 5;
pub const NL80211_WOWLAN_TRIG_GTK_REKEY_FAILURE: ::libc::c_uint = 6;
pub const NL80211_WOWLAN_TRIG_EAP_IDENT_REQUEST: ::libc::c_uint = 7;
pub const NL80211_WOWLAN_TRIG_4WAY_HANDSHAKE: ::libc::c_uint = 8;
pub const NL80211_WOWLAN_TRIG_RFKILL_RELEASE: ::libc::c_uint = 9;
pub const NL80211_WOWLAN_TRIG_WAKEUP_PKT_80211: ::libc::c_uint = 10;
pub const NL80211_WOWLAN_TRIG_WAKEUP_PKT_80211_LEN: ::libc::c_uint = 11;
pub const NL80211_WOWLAN_TRIG_WAKEUP_PKT_8023: ::libc::c_uint = 12;
pub const NL80211_WOWLAN_TRIG_WAKEUP_PKT_8023_LEN: ::libc::c_uint = 13;
pub const NL80211_WOWLAN_TRIG_TCP_CONNECTION: ::libc::c_uint = 14;
pub const NL80211_WOWLAN_TRIG_WAKEUP_TCP_MATCH: ::libc::c_uint = 15;
pub const NL80211_WOWLAN_TRIG_WAKEUP_TCP_CONNLOST: ::libc::c_uint = 16;
pub const NL80211_WOWLAN_TRIG_WAKEUP_TCP_NOMORETOKENS: ::libc::c_uint = 17;
pub const NL80211_WOWLAN_TRIG_NET_DETECT: ::libc::c_uint = 18;
pub const NL80211_WOWLAN_TRIG_NET_DETECT_RESULTS: ::libc::c_uint = 19;
pub const NUM_NL80211_WOWLAN_TRIG: ::libc::c_uint = 20;
pub const MAX_NL80211_WOWLAN_TRIG: ::libc::c_uint = 19;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nl80211_wowlan_tcp_data_seq {
    pub start: __u32,
    pub offset: __u32,
    pub len: __u32,
}
impl ::std::clone::Clone for Struct_nl80211_wowlan_tcp_data_seq {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nl80211_wowlan_tcp_data_seq {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nl80211_wowlan_tcp_data_token {
    pub offset: __u32,
    pub len: __u32,
    pub token_stream: *mut __u8,
}
impl ::std::clone::Clone for Struct_nl80211_wowlan_tcp_data_token {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nl80211_wowlan_tcp_data_token {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nl80211_wowlan_tcp_data_token_feature {
    pub min_len: __u32,
    pub max_len: __u32,
    pub bufsize: __u32,
}
impl ::std::clone::Clone for Struct_nl80211_wowlan_tcp_data_token_feature {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nl80211_wowlan_tcp_data_token_feature
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_nl80211_wowlan_tcp_attrs = ::libc::c_uint;
pub const __NL80211_WOWLAN_TCP_INVALID: ::libc::c_uint = 0;
pub const NL80211_WOWLAN_TCP_SRC_IPV4: ::libc::c_uint = 1;
pub const NL80211_WOWLAN_TCP_DST_IPV4: ::libc::c_uint = 2;
pub const NL80211_WOWLAN_TCP_DST_MAC: ::libc::c_uint = 3;
pub const NL80211_WOWLAN_TCP_SRC_PORT: ::libc::c_uint = 4;
pub const NL80211_WOWLAN_TCP_DST_PORT: ::libc::c_uint = 5;
pub const NL80211_WOWLAN_TCP_DATA_PAYLOAD: ::libc::c_uint = 6;
pub const NL80211_WOWLAN_TCP_DATA_PAYLOAD_SEQ: ::libc::c_uint = 7;
pub const NL80211_WOWLAN_TCP_DATA_PAYLOAD_TOKEN: ::libc::c_uint = 8;
pub const NL80211_WOWLAN_TCP_DATA_INTERVAL: ::libc::c_uint = 9;
pub const NL80211_WOWLAN_TCP_WAKE_PAYLOAD: ::libc::c_uint = 10;
pub const NL80211_WOWLAN_TCP_WAKE_MASK: ::libc::c_uint = 11;
pub const NUM_NL80211_WOWLAN_TCP: ::libc::c_uint = 12;
pub const MAX_NL80211_WOWLAN_TCP: ::libc::c_uint = 11;
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct_nl80211_coalesce_rule_support {
    pub max_rules: __u32,
    pub pat: Struct_nl80211_pattern_support,
    pub max_delay: __u32,
}
impl ::std::clone::Clone for Struct_nl80211_coalesce_rule_support {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nl80211_coalesce_rule_support {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_nl80211_attr_coalesce_rule = ::libc::c_uint;
pub const __NL80211_COALESCE_RULE_INVALID: ::libc::c_uint = 0;
pub const NL80211_ATTR_COALESCE_RULE_DELAY: ::libc::c_uint = 1;
pub const NL80211_ATTR_COALESCE_RULE_CONDITION: ::libc::c_uint = 2;
pub const NL80211_ATTR_COALESCE_RULE_PKT_PATTERN: ::libc::c_uint = 3;
pub const NUM_NL80211_ATTR_COALESCE_RULE: ::libc::c_uint = 4;
pub const NL80211_ATTR_COALESCE_RULE_MAX: ::libc::c_uint = 3;
pub type Enum_nl80211_coalesce_condition = ::libc::c_uint;
pub const NL80211_COALESCE_CONDITION_MATCH: ::libc::c_uint = 0;
pub const NL80211_COALESCE_CONDITION_NO_MATCH: ::libc::c_uint = 1;
pub type Enum_nl80211_iface_limit_attrs = ::libc::c_uint;
pub const NL80211_IFACE_LIMIT_UNSPEC: ::libc::c_uint = 0;
pub const NL80211_IFACE_LIMIT_MAX: ::libc::c_uint = 1;
pub const NL80211_IFACE_LIMIT_TYPES: ::libc::c_uint = 2;
pub const NUM_NL80211_IFACE_LIMIT: ::libc::c_uint = 3;
pub const MAX_NL80211_IFACE_LIMIT: ::libc::c_uint = 2;
pub type Enum_nl80211_if_combination_attrs = ::libc::c_uint;
pub const NL80211_IFACE_COMB_UNSPEC: ::libc::c_uint = 0;
pub const NL80211_IFACE_COMB_LIMITS: ::libc::c_uint = 1;
pub const NL80211_IFACE_COMB_MAXNUM: ::libc::c_uint = 2;
pub const NL80211_IFACE_COMB_STA_AP_BI_MATCH: ::libc::c_uint = 3;
pub const NL80211_IFACE_COMB_NUM_CHANNELS: ::libc::c_uint = 4;
pub const NL80211_IFACE_COMB_RADAR_DETECT_WIDTHS: ::libc::c_uint = 5;
pub const NL80211_IFACE_COMB_RADAR_DETECT_REGIONS: ::libc::c_uint = 6;
pub const NUM_NL80211_IFACE_COMB: ::libc::c_uint = 7;
pub const MAX_NL80211_IFACE_COMB: ::libc::c_uint = 6;
pub type Enum_nl80211_plink_state = ::libc::c_uint;
pub const NL80211_PLINK_LISTEN: ::libc::c_uint = 0;
pub const NL80211_PLINK_OPN_SNT: ::libc::c_uint = 1;
pub const NL80211_PLINK_OPN_RCVD: ::libc::c_uint = 2;
pub const NL80211_PLINK_CNF_RCVD: ::libc::c_uint = 3;
pub const NL80211_PLINK_ESTAB: ::libc::c_uint = 4;
pub const NL80211_PLINK_HOLDING: ::libc::c_uint = 5;
pub const NL80211_PLINK_BLOCKED: ::libc::c_uint = 6;
pub const NUM_NL80211_PLINK_STATES: ::libc::c_uint = 7;
pub const MAX_NL80211_PLINK_STATES: ::libc::c_uint = 6;
pub type Enum_plink_actions = ::libc::c_uint;
pub const NL80211_PLINK_ACTION_NO_ACTION: ::libc::c_uint = 0;
pub const NL80211_PLINK_ACTION_OPEN: ::libc::c_uint = 1;
pub const NL80211_PLINK_ACTION_BLOCK: ::libc::c_uint = 2;
pub const NUM_NL80211_PLINK_ACTIONS: ::libc::c_uint = 3;
pub type Enum_nl80211_rekey_data = ::libc::c_uint;
pub const __NL80211_REKEY_DATA_INVALID: ::libc::c_uint = 0;
pub const NL80211_REKEY_DATA_KEK: ::libc::c_uint = 1;
pub const NL80211_REKEY_DATA_KCK: ::libc::c_uint = 2;
pub const NL80211_REKEY_DATA_REPLAY_CTR: ::libc::c_uint = 3;
pub const NUM_NL80211_REKEY_DATA: ::libc::c_uint = 4;
pub const MAX_NL80211_REKEY_DATA: ::libc::c_uint = 3;
pub type Enum_nl80211_hidden_ssid = ::libc::c_uint;
pub const NL80211_HIDDEN_SSID_NOT_IN_USE: ::libc::c_uint = 0;
pub const NL80211_HIDDEN_SSID_ZERO_LEN: ::libc::c_uint = 1;
pub const NL80211_HIDDEN_SSID_ZERO_CONTENTS: ::libc::c_uint = 2;
pub type Enum_nl80211_sta_wme_attr = ::libc::c_uint;
pub const __NL80211_STA_WME_INVALID: ::libc::c_uint = 0;
pub const NL80211_STA_WME_UAPSD_QUEUES: ::libc::c_uint = 1;
pub const NL80211_STA_WME_MAX_SP: ::libc::c_uint = 2;
pub const __NL80211_STA_WME_AFTER_LAST: ::libc::c_uint = 3;
pub const NL80211_STA_WME_MAX: ::libc::c_uint = 2;
pub type Enum_nl80211_pmksa_candidate_attr = ::libc::c_uint;
pub const __NL80211_PMKSA_CANDIDATE_INVALID: ::libc::c_uint = 0;
pub const NL80211_PMKSA_CANDIDATE_INDEX: ::libc::c_uint = 1;
pub const NL80211_PMKSA_CANDIDATE_BSSID: ::libc::c_uint = 2;
pub const NL80211_PMKSA_CANDIDATE_PREAUTH: ::libc::c_uint = 3;
pub const NUM_NL80211_PMKSA_CANDIDATE: ::libc::c_uint = 4;
pub const MAX_NL80211_PMKSA_CANDIDATE: ::libc::c_uint = 3;
pub type Enum_nl80211_tdls_operation = ::libc::c_uint;
pub const NL80211_TDLS_DISCOVERY_REQ: ::libc::c_uint = 0;
pub const NL80211_TDLS_SETUP: ::libc::c_uint = 1;
pub const NL80211_TDLS_TEARDOWN: ::libc::c_uint = 2;
pub const NL80211_TDLS_ENABLE_LINK: ::libc::c_uint = 3;
pub const NL80211_TDLS_DISABLE_LINK: ::libc::c_uint = 4;
pub type Enum_nl80211_feature_flags = ::libc::c_int;
pub const NL80211_FEATURE_SK_TX_STATUS: ::libc::c_int = 1;
pub const NL80211_FEATURE_HT_IBSS: ::libc::c_int = 2;
pub const NL80211_FEATURE_INACTIVITY_TIMER: ::libc::c_int = 4;
pub const NL80211_FEATURE_CELL_BASE_REG_HINTS: ::libc::c_int = 8;
pub const NL80211_FEATURE_P2P_DEVICE_NEEDS_CHANNEL: ::libc::c_int = 16;
pub const NL80211_FEATURE_SAE: ::libc::c_int = 32;
pub const NL80211_FEATURE_LOW_PRIORITY_SCAN: ::libc::c_int = 64;
pub const NL80211_FEATURE_SCAN_FLUSH: ::libc::c_int = 128;
pub const NL80211_FEATURE_AP_SCAN: ::libc::c_int = 256;
pub const NL80211_FEATURE_VIF_TXPOWER: ::libc::c_int = 512;
pub const NL80211_FEATURE_NEED_OBSS_SCAN: ::libc::c_int = 1024;
pub const NL80211_FEATURE_P2P_GO_CTWIN: ::libc::c_int = 2048;
pub const NL80211_FEATURE_P2P_GO_OPPPS: ::libc::c_int = 4096;
pub const NL80211_FEATURE_ADVERTISE_CHAN_LIMITS: ::libc::c_int = 16384;
pub const NL80211_FEATURE_FULL_AP_CLIENT_STATE: ::libc::c_int = 32768;
pub const NL80211_FEATURE_USERSPACE_MPM: ::libc::c_int = 65536;
pub const NL80211_FEATURE_ACTIVE_MONITOR: ::libc::c_int = 131072;
pub const NL80211_FEATURE_AP_MODE_CHAN_WIDTH_CHANGE: ::libc::c_int = 262144;
pub const NL80211_FEATURE_DS_PARAM_SET_IE_IN_PROBES: ::libc::c_int = 524288;
pub const NL80211_FEATURE_WFA_TPC_IE_IN_PROBES: ::libc::c_int = 1048576;
pub const NL80211_FEATURE_QUIET: ::libc::c_int = 2097152;
pub const NL80211_FEATURE_TX_POWER_INSERTION: ::libc::c_int = 4194304;
pub const NL80211_FEATURE_ACKTO_ESTIMATION: ::libc::c_int = 8388608;
pub const NL80211_FEATURE_STATIC_SMPS: ::libc::c_int = 16777216;
pub const NL80211_FEATURE_DYNAMIC_SMPS: ::libc::c_int = 33554432;
pub const NL80211_FEATURE_SUPPORTS_WMM_ADMISSION: ::libc::c_int = 67108864;
pub const NL80211_FEATURE_MAC_ON_CREATE: ::libc::c_int = 134217728;
pub const NL80211_FEATURE_TDLS_CHANNEL_SWITCH: ::libc::c_int = 268435456;
pub const NL80211_FEATURE_SCAN_RANDOM_MAC_ADDR: ::libc::c_int = 536870912;
pub const NL80211_FEATURE_SCHED_SCAN_RANDOM_MAC_ADDR: ::libc::c_int =
    1073741824;
pub const NL80211_FEATURE_ND_RANDOM_MAC_ADDR: ::libc::c_int = -2147483648;
pub type Enum_nl80211_probe_resp_offload_support_attr = ::libc::c_uint;
pub const NL80211_PROBE_RESP_OFFLOAD_SUPPORT_WPS: ::libc::c_uint = 1;
pub const NL80211_PROBE_RESP_OFFLOAD_SUPPORT_WPS2: ::libc::c_uint = 2;
pub const NL80211_PROBE_RESP_OFFLOAD_SUPPORT_P2P: ::libc::c_uint = 4;
pub const NL80211_PROBE_RESP_OFFLOAD_SUPPORT_80211U: ::libc::c_uint = 8;
pub type Enum_nl80211_connect_failed_reason = ::libc::c_uint;
pub const NL80211_CONN_FAIL_MAX_CLIENTS: ::libc::c_uint = 0;
pub const NL80211_CONN_FAIL_BLOCKED_CLIENT: ::libc::c_uint = 1;
pub type Enum_nl80211_scan_flags = ::libc::c_uint;
pub const NL80211_SCAN_FLAG_LOW_PRIORITY: ::libc::c_uint = 1;
pub const NL80211_SCAN_FLAG_FLUSH: ::libc::c_uint = 2;
pub const NL80211_SCAN_FLAG_AP: ::libc::c_uint = 4;
pub const NL80211_SCAN_FLAG_RANDOM_ADDR: ::libc::c_uint = 8;
pub type Enum_nl80211_acl_policy = ::libc::c_uint;
pub const NL80211_ACL_POLICY_ACCEPT_UNLESS_LISTED: ::libc::c_uint = 0;
pub const NL80211_ACL_POLICY_DENY_UNLESS_LISTED: ::libc::c_uint = 1;
pub type Enum_nl80211_smps_mode = ::libc::c_uint;
pub const NL80211_SMPS_OFF: ::libc::c_uint = 0;
pub const NL80211_SMPS_STATIC: ::libc::c_uint = 1;
pub const NL80211_SMPS_DYNAMIC: ::libc::c_uint = 2;
pub const __NL80211_SMPS_AFTER_LAST: ::libc::c_uint = 3;
pub const NL80211_SMPS_MAX: ::libc::c_uint = 2;
pub type Enum_nl80211_radar_event = ::libc::c_uint;
pub const NL80211_RADAR_DETECTED: ::libc::c_uint = 0;
pub const NL80211_RADAR_CAC_FINISHED: ::libc::c_uint = 1;
pub const NL80211_RADAR_CAC_ABORTED: ::libc::c_uint = 2;
pub const NL80211_RADAR_NOP_FINISHED: ::libc::c_uint = 3;
pub type Enum_nl80211_dfs_state = ::libc::c_uint;
pub const NL80211_DFS_USABLE: ::libc::c_uint = 0;
pub const NL80211_DFS_UNAVAILABLE: ::libc::c_uint = 1;
pub const NL80211_DFS_AVAILABLE: ::libc::c_uint = 2;
pub type Enum_nl80211_protocol_features = ::libc::c_uint;
pub const NL80211_PROTOCOL_FEATURE_SPLIT_WIPHY_DUMP: ::libc::c_uint = 1;
pub type Enum_nl80211_crit_proto_id = ::libc::c_uint;
pub const NL80211_CRIT_PROTO_UNSPEC: ::libc::c_uint = 0;
pub const NL80211_CRIT_PROTO_DHCP: ::libc::c_uint = 1;
pub const NL80211_CRIT_PROTO_EAPOL: ::libc::c_uint = 2;
pub const NL80211_CRIT_PROTO_APIPA: ::libc::c_uint = 3;
pub const NUM_NL80211_CRIT_PROTO: ::libc::c_uint = 4;
pub type Enum_nl80211_rxmgmt_flags = ::libc::c_uint;
pub const NL80211_RXMGMT_FLAG_ANSWERED: ::libc::c_uint = 1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nl80211_vendor_cmd_info {
    pub vendor_id: __u32,
    pub subcmd: __u32,
}
impl ::std::clone::Clone for Struct_nl80211_vendor_cmd_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nl80211_vendor_cmd_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_nl80211_tdls_peer_capability = ::libc::c_uint;
pub const NL80211_TDLS_PEER_HT: ::libc::c_uint = 1;
pub const NL80211_TDLS_PEER_VHT: ::libc::c_uint = 2;
pub const NL80211_TDLS_PEER_WMM: ::libc::c_uint = 4;
